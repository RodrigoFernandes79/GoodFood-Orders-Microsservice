
spring.datasource.url=jdbc:mysql://localhost:3306/${DATABASE}?createDatabaseIfNotExist=true
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#Configurate Eureka Server:
spring.application.name=orders-ms
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka

spring.config.import=optional:file:.env[.properties]
#Properties RabbitMQ configuration:
spring.rabbitmq.host=${RABBITMQ_HOST}
spring.rabbitmq.port=${RABBITMQ_PORT}
spring.rabbitmq.username=${RABBITMQ_USERNAME}
spring.rabbitmq.password=${RABBITMQ_PASSWORD}

#permit that Eureka manages the default port:
server.port=0
# Enable all Actuator endpoints
management.endpoints.web.exposure.include=*
#adding this property to identify the unique id of each ordering service instance (Load Balance)
eureka.instance.instance-id=${spring.application.name}:${random.int}

#Configure the Retry Limit when there is an error processing messages in RabbitMQ
#retry.enabled: Enables the automatic retry mechanism:
spring.rabbitmq.listener.simple.retry.enabled=true
#retry.max-attempts: Sets the maximum number of attempts (in this case, 4):
spring.rabbitmq.listener.simple.retry.max-attempts=4

#Configure Retry Interval
#initial-interval: Sets the time (in milliseconds) before the first attempt (5000ms = 5 seconds):
spring.rabbitmq.listener.simple.retry.initial-interval=5000
#multiplier: Multiplies the initial interval for each new attempt (1 = no multiplication):
spring.rabbitmq.listener.simple.retry.multiplier=1
#max-interval: Sets the maximum interval between attempts (300000ms = 5 minutes):
spring.rabbitmq.listener.simple.retry.max-interval=300000